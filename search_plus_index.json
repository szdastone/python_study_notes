{"./":{"url":"./","title":"简介","keywords":"","body":"简介 个人学习Python的学习记录！ © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"install/":{"url":"install/","title":"安装","keywords":"","body":"安装 要安装python，那么就需要去官网先了解，链接如下： 【官方网站】：http://python.org 【下载网址】：https://www.python.org/downloads 当前的版本为3.7.3，那我们就以这个版本为准进行安装以及后面的学习！ 另外提供一些python学习网站： 【第三方库】：https://pypi.python.org/pypi 【官方文档】：https://docs.python.org/zh-cn/3/ 【中文教程】：http://www.runoob.com/python3/python3-tutorial.html 【Awesome Python】：https://github.com/vinta/awesome-python 【Awesome Python中文版】：https://github.com/jobbole/awesome-python-cn 【廖雪峰的Python教程】：https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"install/install.html":{"url":"install/install.html","title":"安装","keywords":"","body":"安装 Winodws安装 windows安装很简单，下载了安装包直接按提示一步一步安装即可，这里不再介绍。安装完成后，请将Python安装路径以及Scripts目录配置到环境变量中。 另外介绍下Anaconda安装，在Anaconda网站下载Windows下对应的Python3版本，进行标准安装即可。 Anaconda安装完成后，python的环境就配置好了。 Linux安装 由于我只安装了Ubuntu的虚拟环境，所以只介绍Ubuntu下安装Python。 其实安装完Ubuntu 18.04以后，系统就以及安装好了python2.7以及python3.6，如果需要源码安装Python3.7.3，则请参考我另外的文档：Ubuntu 中安装与配置 Python3.7 Linux下也支持Anaconda，可在Anaconda网站下载Linux下对应的Python3版本，按提示安装既可以。 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"install/venv.html":{"url":"install/venv.html","title":"虚拟环境","keywords":"","body":"虚拟环境 什么是Python的虚拟环境呢？其实Python虚拟环境就是为项目创建的相对独立的开发环境，也就是可为每个项目安装各自独立使用的依赖模块。 解释了可能还是不明白，我最初也是不明白的，到底我只是学习python，搞那么多环境干啥呢？这里在举例解释下，比如你有2个python项目，同时都用到了某个第三方模块numpy，如果这2个项目使用同一个版本的numpy模块，那么不可能产生疑问。但如果使用了不同版本的numpy模块呢？由于python导入模块时并不能区分模块的版本，那么这2个使用不同版本numpy模块的项目就会出现问题了。 那怎么使用虚拟环境呢？在Python3中，默认安装了pyvenv。直接使用就可以了。 创建一个虚拟环境: $python3 -m venv pyvenv2 其中pyvenv2是虚拟环境建立的路径，可根据需求自行定义，该命令会自动在当前目录下建立目录，并将python环境copy到这个目录，该目录结构为： 图：1554967797901 要激活刚才创建的虚拟环境pyvenv2，那么只需要输入如下代码： $source pyvenv2/bin/activate 成功后，则提示符前会加入环境名称，如下： (pyvenv2) $ 如果要退出虚拟环境，那么直接输入： (pyvenv2) $deactivate 好了，验证下虚拟环境。在Python非虚拟环境下，输入命令： $which python /usr/bin/python 激活虚拟环境pyvenv2后，再次查看python路径： $source pyvenv2/bin/activate （pyvenv2）$which python /home/dastone/pyvenv2/bin/python 如果我们查看下环境变量$PATH，会发现这个变量在激活前后是不同的。 我们也可在python中查看环境变量以及pip的site packages目录： 图：1554970396705 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/":{"url":"basic/","title":"基础","keywords":"","body":"基础 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/data_type.html":{"url":"basic/data_type.html","title":"数据类型","keywords":"","body":"数据类型 字符串 字符串就是一系列字符，可用引号括起来的都是字符串。引号可以为单引号，双引号。可灵活的使用单引号与双引号。如果字符串包含有单双引号，可使用转义符(\\)。当然，转义符也可以用来转义其他字符，比如制表符\\t,换行符\\n，但如果要使用\\，则需要使用\\\\来表示！ 比如： \"this is a string\" 'this is also a string' 'hello, \"python\"！' \"i'm a good boy!\" 'I\\'m \\\"OK\\\"' '\\tI love python!\\n\\n \\\\but python don\\'t easy!' 如果字符串有很多的\\ ,为了简化，可以使用r''来表示''内部字符串不转义，如 >>>print('\\\\\\t\\\\') #\\ \\ >>>print(r'\\\\\\t\\\\') #\\\\\\t\\\\ 如果有太多的换行\\n，或者每行的字符太长有多行时，可使用'''...'''来输入多行内容，比如： >>>print('''line1 ...line2 ...line3''') line1 line2 line3 字符串操作 操作 说明 示例 title 将字符串首字符大写 \"hello world\".title()=>Hello World lower 将字符串改为小写 \"Hello World\".lower()=>hello world upper 将字符串改为大写 \"hello world\".upper()=>HELLO WORLD rstrip 删除字符串右侧的空格 \" Python \".rstrip()=>' Python' lstrip 删除字符串左侧的空格 \" Python \".lstrip()=>'Python ' strip 删除字符串2侧的空格 \" Python \".strip()=>'Python' 字符串合并 字符串可使用+来拼接，比如： >>>s = \"Hello\" >>>s = s + ' '+'World' >>>print(s) 字符串合并也可混合运算符，比如+为合并，*为重复 >>>3*'un'+'ium' 'unununium' 2个或多个字符串会自动合并，如: >>>'Hello' ' ' 'Py' 'thon' Hello Python 其他 要输入多行怎么办呢？可使用（）来输入多行，如： >>> text = ('Put several strings within parentheses ... 'to have them joined together.') >>> text 'Put several strings within parentheses to have them joined together.' 字符串其实就是一个元组，可使用元组的一些特性，如： >>>word='Python' >>>word[0] 'P' >>>word[-1] 'n' >>>word[0:2] 'Py' >>>word[-2:] 'on' >>>J+word[1:] 'Jython' 内置函数len()表示字符串的长度 >>>S='abdde' >>>len(S) 5 数字 整数 可处理任意大小整数，并可使用加(+)减(-)乘(*)除-(/)来运算。可以用python当计算器做各种运算。 >>> 3*3 9 >>>3**3 27 >>>(2+10)*2-(10+3) 11 浮点数 带小数的就是浮点数。浮点数的小数点位置是可以变的。比如$1.2310^9$和$12.310^8$是相等的。浮点数可使用数学写法，如:1.23，3.14，-9.01，但也可使用科学计数法，如$1.23*10^9$就是1.23e9，0.000012可写成1.2e-5，等等。 >>>tax=12.5/100 >>>price=100.50 >>>price*tax 12.5625 >>>price+_ 113.0625 >>>round(_,2) 113.06 在交互模式下，变量(_)代表了最后一个表达式。 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/list.html":{"url":"basic/list.html","title":"列表","keywords":"","body":"列表 Python内置的列表list是一种有序集合，可随时添加或删除其中元素。用方括号([])来表示列表。如： >>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] 如要定义一个空列表，则如下： >>> empty_list = [] >>> empty_list [] >>> len(empty_list) 0 列表基本操作 访问列表 列表第一个元素为0，要访问列表只需如数组般访问即可，如： >>>print(fruits[0]) orange 要访问最后一个元素，可指定索引为-1，如: >>>print(fruits[-1]) banana 可对访问的值进行操作，比如： >>>print(fruits[-2].title()) Apple 可使用len来获取列表的长度，如 >>>len(fruits) 7 修改、添加元素 修改列表的元素值很简单，直接将访问的值进行修改就可以了，如： >>>fruits[0] = 'grape' >>>print(fruits) ['grape', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] 添加元素，可使用append，如 fruits.append('abc') 这样就将元素添加到了列表的最后。而其他元素并没有受到影响。 插入元素到指定位置，使用insert,如 fruits.insert(1,'abc') 将元素添加到了指定位置，该位置以前元素没有任何影响，该位置以后的索引右移了一位。 删除元素 使用del语句删除元素,比如： del fruits[1] del可删除任何位置的列表元素，但必须有索引。 del也可以删除整个列表，注意删除后列表则不可访问了。 >>>del fruits >>print(fruits) Traceback (most recent call last): File \"\", line 1, in NameError: name 'fruits' is not defined 使用pop()来删除元素，比如： poped_fruits = fruits.pop() pop删除元素后会返回删除的元素。而且pop一定是删除最后一个元素。如果要pop指定位置元素，则比如传入索引，比如： fruits.pop(2) 那么，到底是该使用del语句还是pop()方法了，一个简单判断标准就是：如从列表中删除一个元素，且不再使用它了，就是用del语句；如删除元素后还要继续使用它，则使用方法pop()。 remove删除元素，如果知道要删除元素的值，但不知道位置，则使用remove了。比如： fruits.remove('abc') remove只删除第一个指定的值，如要删除的值在列表中多次出现，则需要使用循环判断来删除了。 列表排序 永久排序 使用方法sort()进行永久排序，比如定义一个列表及排序: >>>cars = ['bmw', 'audi', 'toyota', 'subaru'] >>>cars.sort() >>>print(cars) ['audi', 'bmw','subaru','toyota'] 如要反排序，则使用方法sort()时传入参数reverse=True,如下： >>>cars = ['bmw', 'audi', 'toyota', 'subaru'] >>>cars.sort(reverse=True) >>>print(cars) ['toyota','subaru','bmw','audi'] 临时排序 使用sorted()对列表临时排序，如： >>>cars = ['bmw', 'audi', 'toyota', 'subaru'] >>>print(sorted(cars)) ['audi', 'bmw','subaru','toyota'] >>>print(cars) ['bmw', 'audi', 'toyota', 'subaru'] 同样，可使用reverse=True来进行反排序。 顺序与长度 列表也可以使用reverse()进行修改顺序，调用后会永久修改列表元素的排列顺序，如要恢复，则再次调用。 >>>cars = ['bmw', 'audi', 'toyota', 'subaru'] >>>cars.reverse() >>>print(cars) ['subaru','toyota','audi','bmw'] 列表的长度使用len,如： >>>cars = ['bmw', 'audi', 'toyota', 'subaru'] >>>len(cars) 4 请注意列表的索引，如超出这个范围则会错误，如列表的长度为n,则序号为[-n...n-1]之间。如超出，则会出现如下错误： Traceback (most recent call last): File \"\", line 1, in IndexError: list index out of range 遍历列表 要访问列表的所有元素，可使用for循环。 cars = ['bmw', 'audi', 'toyota', 'subaru'] for car in cars: print(car) 创建列表 使用函数range() 可使用range()来生成一系列数字，如 for value in range(1,5) print(value) range(1,5)会打印数字1-4，range()有3个参数，开始数字，结束数字以及步长，如range(1,10,3)则会打印1,4,7这3个数。 如要生成数字列表，可如下： >>>nums = list(range(1,6)) >>>print(nums) [1,2,3,4,5] 数字列表的简单统计 可使用min,max,sum来对数字列表进行统计。 >>>digits = list(range(1,10)) >>>min(digits) 1 >>>max(digits) 9 >>>sum(digits) 45 列表解析 列表解析就是将for循环以及创建新元素代码合并成一行，病自动附件新元素。如 >>>squares = [values**2 for value in range(1,11)] >>>print(squares) [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 列表切片 如果访问列表部分元素，可使用切片，一般要指定第一个元素及最后一个元素的索引，和range()函数差不多吧。如： >>>cars = ['bmw', 'audi', 'toyota', 'subaru'] >>>print(cars[0:3]) ['bmw', 'audi', 'toyota'] 如没有指定第一个索引，则从列表开头开始，如没有指定第二个索引，则到列表结尾结束;当然，索引也可以是负数，如: cars[:3] #等同cars[0:3] cars[2:] #等同cars[2:4] cars[:] #等同cars或cars[0:4] cars[-3:] #等同cars[-3,0],打印最后3个 当然切边后的列表也是列表，所以还是可以遍历的，可试下？ 复制列表 复制列表，可使用切片方法来复制。如 cars = ['bmw', 'audi', 'toyota', 'subaru'] new_cars = cars[:] 为啥不直接赋值呢？比如new_cars=cars不行么？好像是可以，但还是有问题。赋值后指向同一个地址，当修改一个列表，则另一个列表也修改了，这是你所预期的？ © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/tuple.html":{"url":"basic/tuple.html","title":"元组","keywords":"","body":"元组 列表是可变的数据集，那么元组呢？元组就是不可变的数据集。元组一旦修改，则不可改变。元组和列表类似，元组是使用圆括号来标识的。定义元组后，可如列表一样进行访问，遍历等，但不可以修改，删除。 定义元组 元组定义很列表类似，如： dimensions = (200,500) 如果要定义一个空元组，可如下定义： empty = () 那定义一个有一个元素的元组呢？ >>>t = (1) >>>print(t) 1 怎么打印出来不是元组，是个数字1呢？这是因为()既可以标识元组，也可以表示数学中的小括号，为了消除歧义，必须加一个逗号，，如下定义一个元素的元组： >>>t=(1,) >>>print(t) (1,) © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/if.html":{"url":"basic/if.html","title":"流程控制","keywords":"","body":"流程控制 IF语句 If语句就是进行流程判断，然后做出相应的处理。比如： cars = ['audi','bmw','subaru','toyota'] for car in cars: if car == 'bmw': print(car.upper()) else: print(car.title()) 条件测试 使用 == 来判断是否相等，如: car = 'bmw' car == 'bmw' # True car = 'Audi' car == 'audi' # False car.lower() == 'audi' # True 使用!=来判断是否不相等 car = 'bmw' car !='audi' #True 上面都是字符串比较，那么数字呢？除了 ==，!=外，还有小于（)，大于等于(>=)，小于等于( 如果是列表呢？就可以使用in了。如: cars = ['audi','bmw','subaru','toyota'] 'bmw' in cars # True 'apple' not in cars # True 多条件判断 使用and 和or 来进行多条件判断。 age=10 age>=6 and age10 and age=10 or ageif-else语句 当条件通过执行一个操作，没通过则执行另一个操作时，就要用到if-else语句了。 age =17 if age>=18: print('你可以选举了') else: print('对不起，你还不能选举') if-elif-else语句 多条件判断，当所有条件不满足，则执行else语句，比如： age =12 if age>4: print('免费') elif age© 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/loop.html":{"url":"basic/loop.html","title":"循环","keywords":"","body":"循环 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/dict.html":{"url":"basic/dict.html","title":"字典","keywords":"","body":"字典 字典与列表和元组不同，存储的信息会更多，更准确。字典使用花括号({})来表示，使用一系列的键-值，可使用键来访问对应的值。比如: product = {'color': 'red', 'price': 51.00} print(product[color]) print(product[price]) 添加、修改、删除键值 字典是动态的，可随时添加键值以及修改、删除键值。如： product = {'color': 'red', 'price': 51.00} product['qty'] = 5 product['disc'] = -3 product[price] = 53 del product['disc'] 遍历字典 如列表、元组一样，可遍历字典的所有键值。 product = {'color': 'red', 'price': 51.00} for key, value in product.items: print(\"Key:\"+key) print(\"\\nValue:\"+value) 字典的所有key实际组成了一个列表，你可如列表一样进行遍历： for key in product.keys(): print(\"Key:\"+key) 同样，所有的value也组成了列表，可通过product.values()访问。 既然字典的keys()、values()都是列表，那一样适用列表的属性，比如可使用sorted进行临时排序。 嵌套 字典内的元素不一定就是固定一种类型，其值可以是字符串，数字，布尔值，元组，列表，甚至字典。也就是字典中可嵌套列表或字典，同样，列表也可嵌套字典、列表等。 product1 = {'color':'red','price':53} product2 = {'color':'blue','price':44} products = [product1,product2] for product in products: print(product) pizza = { 'crust': 'thick', 'toppints': ['mushrooms', 'extra cheese'], } users = { 'john': { 'first': 'jack', 'last': 'zhao' }, 'rose': { 'first': 'rose', 'last': 'li' }, } © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/function.html":{"url":"basic/function.html","title":"函数","keywords":"","body":"函数 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/class.html":{"url":"basic/class.html","title":"类","keywords":"","body":"类 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/exception.html":{"url":"basic/exception.html","title":"异常","keywords":"","body":"异常 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/inout.html":{"url":"basic/inout.html","title":"输入输出","keywords":"","body":"输入输出 有时程序必须等待用户输入才可继续工作，那么怎么通过获取用户输入来控制程序呢？ input() 函数input()会让程序暂停等待用户输入，然后将输入作为变量存储以便用户使用。比如： name = input(\"请问您怎么称呼呢？请输入您的称呼：\") print(\"Hello\" + name+\"!\") age = input(\"您多大了呢？请输入年龄：\") print(age) 好了，上面年龄显示出来是字符串形式，比如我输入年龄时输入了非数字字符，或者年龄要以数字来进行计算或判断呢？这可使用int()来转换。 age = input(\"您多大了呢？请输入年龄：\") age = int(age) age >=18 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"basic/file.html":{"url":"basic/file.html","title":"文件操作","keywords":"","body":"文件操作 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"module/":{"url":"module/","title":"内置模块","keywords":"","body":"内置模块 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"common/":{"url":"common/","title":"常用模块","keywords":"","body":"常用模块 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"common/requests.html":{"url":"common/requests.html","title":"requests","keywords":"","body":"requests © 2019 Dastone Deng . All rights reserved.本站访客数 人次"}}